
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>

#define BTNINC_PIN 10  // pin for value increment
#define BTNDEC_PIN 11 // pin for value decrement
#define BTNOK_PIN 12  // pin for confirmation

// Software SPI (slower updates, more flexible pin options):
// pin 7 - Serial clock out (SCLK)
// pin 6 - Serial data out (DIN)
// pin 5 - Data/Command select (D/C)
// pin 4 - LCD chip select (CS)
// pin 3 - LCD reset (RST)
Adafruit_PCD8544 display = Adafruit_PCD8544(7, 6, 5, 4, 3);

long rand6;
long rand12;

// 'Aquila', 84x48px
const unsigned char epd_bitmap_Aquila [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xe0, 0x00, 
	0x00, 0x00, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf0, 
	0x00, 0x00, 0x01, 0xf0, 0xf0, 0x01, 0xff, 0xc7, 0xc3, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xf0, 0xff, 
	0xff, 0xf0, 0x07, 0xf7, 0xf9, 0xfc, 0x00, 0x0f, 0xff, 0xf0, 0xff, 0x00, 0x01, 0x8f, 0xb5, 0xe5, 
	0x3c, 0x70, 0x00, 0x0f, 0xf0, 0xfe, 0x00, 0x7e, 0x0f, 0xf8, 0xc7, 0xfc, 0x0f, 0xc0, 0x1f, 0xf0, 
	0xff, 0x0f, 0xe0, 0x0f, 0xfc, 0xcf, 0xf8, 0x60, 0x7e, 0x3f, 0xf0, 0xff, 0xff, 0x01, 0x87, 0xff, 
	0xf9, 0xf0, 0x3c, 0x07, 0xff, 0xf0, 0xff, 0xf0, 0x07, 0x03, 0xc3, 0x30, 0x00, 0x07, 0x00, 0xff, 
	0xf0, 0xff, 0xe0, 0x3c, 0x40, 0x01, 0x20, 0x00, 0xc1, 0xe1, 0xff, 0xf0, 0xff, 0xf0, 0xf0, 0x80, 
	0x0b, 0x34, 0x00, 0x60, 0x7f, 0xff, 0xf0, 0xff, 0xff, 0xc1, 0x10, 0x32, 0x13, 0x09, 0x18, 0x1f, 
	0xff, 0xf0, 0xff, 0xff, 0x06, 0x24, 0xb2, 0x1b, 0x49, 0x8e, 0x0f, 0xff, 0xf0, 0xff, 0xff, 0x0e, 
	0x65, 0xa4, 0x09, 0x48, 0x87, 0x3f, 0xff, 0xf0, 0xff, 0xff, 0x9c, 0x4d, 0xc4, 0x09, 0xe4, 0xc3, 
	0xff, 0xff, 0xf0, 0xff, 0xff, 0xf8, 0xc9, 0xcc, 0x0c, 0xe4, 0x61, 0xff, 0xff, 0xf0, 0xff, 0xff, 
	0xf1, 0x99, 0xf8, 0x07, 0xe6, 0x33, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0x1b, 0xf8, 0x07, 0xfe, 
	0x3f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0x9f, 0xf8, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf6, 0x0b, 
	0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xe4, 0x0d, 0xff, 0xff, 0xff, 0xff, 0xf0, 
	0xff, 0xff, 0xff, 0xff, 0xee, 0x15, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x0a, 
	0x16, 0x3f, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xcf, 0x3e, 0x7f, 0xff, 0xff, 0xff, 
	0xf0, 0xff, 0xff, 0xff, 0xff, 0xb7, 0x3d, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 
	0xbf, 0x3f, 0xbf, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xbf, 0xff, 0xff, 
	0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0
};

// Variables will change:
int d6times = 0; //default value of d6 to roll
int buttonIncState = HIGH;  //default HIGH - not using external resistors
int lastButtonIncState = HIGH;
int buttonDecState = HIGH;
int lastButtonDecState = HIGH;
int buttonOkState = HIGH;
int lastButtonOkState = HIGH;

void setup() {
  pinMode(BTNINC_PIN, INPUT_PULLUP);    //configuring using builtin pullup resistors; pressed is LOW
  pinMode(BTNDEC_PIN, INPUT_PULLUP);
  pinMode(BTNOK_PIN, INPUT_PULLUP);

  Serial.begin(9600);
  randomSeed(analogRead(0));
  display.begin();
  display.setContrast(50);
  display.setRotation(2);
  display.setTextColor(BLACK);
    // funky screen
  display.invertDisplay(1);
  display.drawBitmap(0, 0,  epd_bitmap_Aquila, 84, 48, BLACK);
	display.display();
  delay(3000);
  display.invertDisplay(0);
  display.clearDisplay();

}  //**SETUP ENDS HERE**

void rollDice(void) {
  display.clearDisplay();  
  display.drawRect(1, 1, 83, 47, BLACK);
  display.fillTriangle(3, 3, 80, 3, 42, 18, BLACK);
  display.fillTriangle(3, 45, 80, 45, 42, 30, BLACK);
  display.setCursor(4,20);
  display.println("NOW ROLLING..");
  display.display();
  delay(2000);
  display.clearDisplay();
  display.drawRect(1, 1, 83, 47, BLACK);  
  display.setCursor(4,4);
  display.println("ROLL RESULTS:");
  display.display();
  display.setCursor(36,13);  // rolling d6
  display.println("D6:");
  display.setCursor(4,21);
    for(int i=0; i < d6times; i++)
      {
      rand6 = random(1, 7);
      display.print(rand6);
      display.print(" ");
      }
  rand12 = random(1, 13); //rolling d12
  display.setCursor(28,39);
  display.println("D12:");
  display.setCursor(52,39);
  display.print(rand12); 

}


void loop() {   //**MAIN LOOP STARTS HERE**
// dice choice
  display.drawRect(1, 1, 83, 47, BLACK);
  display.fillTriangle(3, 45, 80, 45, 42, 30, BLACK);
  display.setCursor(4,4);
  display.println("HOW MANY D6?:");
  display.display();  //wysyÅ‚amy na ekran

  buttonIncState = digitalRead(BTNINC_PIN);
  if (buttonIncState != lastButtonIncState) {
    if (buttonIncState == LOW) {
      d6times++;
      delay(100);
      display.clearDisplay();
      display.setCursor(40,12);
      display.println(d6times);
    }
    lastButtonIncState = buttonIncState;
  }

  buttonDecState = digitalRead(BTNDEC_PIN); 
  if (buttonDecState != lastButtonDecState) {
    if (buttonDecState == LOW) {
      d6times--;
      delay(100);
      display.clearDisplay();
      display.setCursor(40,12);
      display.println(d6times);
    }
    lastButtonDecState = buttonDecState;
  }
  if (d6times > 9) {
    d6times = d6times - 1;
    display.clearDisplay();
    display.setCursor(40,12);
    display.println(d6times);
    display.setCursor(27,20);
    display.setTextColor(WHITE,BLACK);
    display.println(" MAX ");
    display.setTextColor(BLACK);
  }
  else if (d6times < 0) {
    d6times = d6times + 1;
    display.clearDisplay();
    display.setCursor(40,12);
    display.println(d6times);
    display.setCursor(4,20);
    display.setTextColor(WHITE,BLACK);
    display.println("ILLEGAL VALUE");
    display.setTextColor(BLACK);
  }
  buttonOkState = digitalRead(BTNOK_PIN);
  if (buttonOkState != lastButtonOkState) {
    while(1) {
      if (buttonOkState == LOW) {
        delay(100);
        rollDice();
        display.display(); 
        delay(5000);  
        display.setCursor(4,4);   //new shit
        display.setTextColor(WHITE, BLACK);
        display.print("OK- RESET NOW");
        display.display();
        digitalRead(BTNOK_PIN); //wait until button OK pressed = if not pressed do nothing
          if (buttonOkState != lastButtonOkState) {
            while(1) {
              if (buttonOkState == HIGH) {
              delay(100);
              digitalRead(BTNOK_PIN);
              return;
              lastButtonOkState = buttonOkState; 
              }
            }
        }
      }
    } 
           
  }      
  
